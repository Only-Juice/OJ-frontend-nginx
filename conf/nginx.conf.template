# 為容器環境優化的 Nginx 配置

# 使用 nginx 用戶運行
user nginx;

# 根據 CPU 核心數自動設定 worker 程序數
worker_processes auto;

# 錯誤日誌配置
error_log /var/log/nginx/error.log warn;

# PID 檔案位置
pid /var/run/nginx.pid;

events {
    # 每個 worker 最大連接數
    worker_connections 1024;
    # 使用 epoll 事件模型（Linux 效能較佳）
    use epoll;
    # 允許一個 worker 同時處理多個連接
    multi_accept on;
}

http {
    # MIME 類型配置
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 日誌格式定義
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # 存取日誌配置
    access_log /var/log/nginx/access.log main;

    # 效能優化設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Gzip 壓縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript 
               application/javascript application/xml+rss 
               application/json application/xml;

    # 安全標頭
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # 主要伺服器配置 (HTTP)
    server {
        listen 80;
        server_name $NGINX_HOST;
        
        # HTTP 重新導向到 HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS 伺服器配置
    server {
        listen 443 ssl http2;
        server_name $NGINX_HOST;
        
        # SSL 憑證配置
        ssl_certificate /etc/ssl/certs/nginx.crt;
        ssl_certificate_key /etc/ssl/private/nginx.key;
        
        # SSL 安全設定
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # 安全標頭 (HTTPS 特定)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 文件根目錄
        root /usr/share/nginx/html;
        index index.html index.htm;

        # 存取日誌
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;

        # 主要位置配置
        location / {
            # 轉發到後端服務 8888 埠
            # 如果後端在宿主機上，使用 host.docker.internal:8888
            # 如果後端在 Docker 容器中，使用容器名稱，例如 backend:8888
            proxy_pass http://host.docker.internal:8888;
            
            # 代理標頭設定
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # 代理超時設定
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 處理 WebSocket 連接（如果需要）
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 備用：如果後端服務不可用
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # 錯誤頁面配置
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # 隱藏 nginx 版本資訊
        server_tokens off;

        # 拒絕存取隱藏檔案
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 健康檢查端點
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
